name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, dev ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # test-backend:
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres:14
  #       env:
  #         POSTGRES_USER: user
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: mydatabase
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install Doppler CLI
  #       uses: dopplerhq/cli-action@v3
  #       with:
  #         doppler-token: ${{ secrets.DOPPLER_TOKEN_DEV }}

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.11'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         cd backend
  #         pip install -r requirements.txt
  #         pip install pytest pytest-cov

  #     - name: Run tests
  #       run: |
  #         cd backend
  #         doppler run -- pytest --cov=app --cov-report=xml

  #     - name: Upload coverage report
  #       uses: codecov/codecov-action@v3
  #       with:
  #         file: ./backend/coverage.xml
  

  build-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3
        with:
          doppler-token: ${{ secrets.DOPPLER_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend
        run: |
          cd backend
          export DOPPLER_TOKEN='${{ secrets.DOPPLER_TOKEN }}'
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # For tags, use the tag version
            VERSION=${GITHUB_REF#refs/tags/}
            doppler run -- docker build -f Dockerfile.prod -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:$VERSION .
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:$VERSION
          else
            # For branches, use branch name
            BRANCH=${GITHUB_REF#refs/heads/}
            doppler run -- docker build -f Dockerfile.prod-t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:$BRANCH .
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:$BRANCH
          fi

  build-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3
        with:
          doppler-token: ${{ secrets.DOPPLER_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend
        run: |
          cd frontend
          export DOPPLER_TOKEN='${{ secrets.DOPPLER_TOKEN }}'
          # Get environment variables from Doppler
          CLERK_PUBLISHABLE_KEY=$(doppler secrets get NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY --plain)
          CLERK_SECRET=$(doppler secrets get CLERK_SECRET_KEY --plain)
          API_URL=$(doppler secrets get NEXT_PUBLIC_API_URL --plain)
          
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # For tags, use the tag version
            VERSION=${GITHUB_REF#refs/tags/}
            docker build -f Dockerfile.prod \
              --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="$CLERK_PUBLISHABLE_KEY" \
              --build-arg CLERK_SECRET_KEY="$CLERK_SECRET" \
              --build-arg NEXT_PUBLIC_API_URL="$API_URL" \
              -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:$VERSION .
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:$VERSION
          else
            # For branches, use branch name
            BRANCH=${GITHUB_REF#refs/heads/}
            docker build -f Dockerfile.prod \
              --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="$CLERK_PUBLISHABLE_KEY" \
              --build-arg CLERK_SECRET_KEY="$CLERK_SECRET" \
              --build-arg NEXT_PUBLIC_API_URL="$API_URL" \
              -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:$BRANCH .
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:$BRANCH
          fi

  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4

      - name: Configure Doppler
        uses: dopplerhq/cli-action@v1
        with:
          doppler-token: ${{ secrets.DOPPLER_TOKEN }}

      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            cd ai-quiz-generation/
            
            # Pull latest code
            git pull

            # Explicitly set GITHUB_REF from GitHub Actions context
            export GITHUB_REF='${{ github.ref }}'
            export VERSION=${GITHUB_REF#refs/tags/}
            echo "Start deploying version $VERSION"

            # Set required environment variables
            export REGISTRY=ghcr.io
            export IMAGE_NAME=${{ github.repository }}
            echo "Using registry: $REGISTRY"
            echo "Using image name: $IMAGE_NAME"
            echo "Using version: $VERSION"

            # Configure Doppler and export environment variables
            echo "üîç Configuring Doppler..."
            export DOPPLER_TOKEN='${{ secrets.DOPPLER_TOKEN }}'
            doppler configure set token "$DOPPLER_TOKEN" --silent

            echo "üìã Exporting Doppler environment variables..."
            eval $(doppler secrets download --format env --no-file | sed 's/^/export /')

            # Print all environment variables for debugging
            echo "üîç Current environment variables:"
            env | sort

            # Login to GitHub Container Registry
            echo "üîê Logging in to GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Pull and start services with environment variables
            echo "üì¶ Pulling latest images..."
            echo "Pulling backend: $REGISTRY/$IMAGE_NAME/backend:$VERSION"
            echo "Pulling frontend: $REGISTRY/$IMAGE_NAME/frontend:$VERSION"
            docker-compose -f docker-compose.prod.yml pull

            echo "üöÄ Starting services with environment variables..."
            docker-compose -f docker-compose.prod.yml up -d

            # Clean up unused images
            echo "üßπ Cleaning up unused Docker images..."
            docker image prune -f

            echo "‚úÖ Deployment completed successfully! Version: $VERSION"
